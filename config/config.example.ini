# ================================================================================
# BULK_MAILER - Professional Email Campaign Manager
# ================================================================================
#
# Author: Krishna Kushwaha
# GitHub: https://github.com/krishna-kush
# Project: BULK_MAILER - Enterprise Email Campaign Management System
# Repository: https://github.com/krishna-kush/Bulk-Mailer
#
# Description: Enterprise-grade email campaign management system designed for
#              professional bulk email campaigns with advanced queue management,
#              intelligent rate limiting, and robust error handling.
#
# Components: - Multi-Provider SMTP Management (Gmail, Outlook, Yahoo, Custom)
#             - Intelligent Queue Management & Load Balancing
#             - Advanced Rate Limiting & Throttling Control
#             - Professional HTML Template System with Personalization
#             - Retry Mechanisms with Exponential Backoff
#             - Real-time Monitoring & Comprehensive Logging
#
# License: MIT License
# Created: 2025
#
# ================================================================================
# This file is part of the BULK_MAILER project.
# For complete documentation, visit: https://github.com/krishna-kush/Bulk-Mailer
# ================================================================================

# ================================================================================
# BULK_MAILER CONFIGURATION EXAMPLE
# ================================================================================
# This is a comprehensive configuration file for a professional email sending system.
# Copy this file to config.ini and customize the values according to your requirements.
#
; IMPORTANT SECURITY NOTES:
; - Never commit real passwords or API keys to version control
; - Use environment variables or secure vaults for sensitive data in production
; - Enable 2FA and use app-specific passwords where supported
; - Regularly rotate passwords and monitor for unauthorized access
; 
; PRODUCTION CHECKLIST:
; □ Replace all placeholder values with actual production values
; □ Verify SMTP credentials and test connectivity
; □ Configure appropriate rate limits for your email providers
; □ Review and adjust timeout and retry settings[if needed]
; ================================================================================

[SMTP]
# ================================================================================
# DEFAULT SMTP CONFIGURATION (Legacy Support)
# ================================================================================
# This section maintains backward compatibility with older configurations.
# These settings are used as fallback when no specific SMTP configuration is found.
# 
# PRODUCTION NOTE: Consider deprecating this section in favor of named SMTP configs
# for better maintainability and security isolation.

host = smtp.gmail.com        # Default SMTP server hostname
port = 587                   # Default SMTP port (587 for STARTTLS, 465 for SSL/TLS)
use_tls = True              # Enable TLS encryption (recommended for security)

[SMTP_CONFIGS]
# ================================================================================
# NAMED SMTP PROVIDER CONFIGURATIONS
# ================================================================================
# Define multiple SMTP providers with specific configurations for different
# email services. Each provider can have different security requirements,
# rate limits, and connection parameters.

# --------------------------------------------------------------------------------
# GMAIL SMTP CONFIGURATION
# --------------------------------------------------------------------------------
# Google Gmail SMTP settings for business and personal accounts
# REQUIREMENTS:
# - Enable 2-factor authentication on your Google account
# - Generate an App Password (not your regular Gmail password)
# - Use App Password in the sender configuration
# 
# RATE LIMITS (as of 2025):
# - 500 emails per day for regular Gmail accounts
# - 2000 emails per day for Google Workspace accounts
# - 100 emails per hour burst limit
gmail_name = gmail                    # Internal identifier for this SMTP config
gmail_host = smtp.gmail.com          # Google's SMTP server
gmail_port = 587                     # Port for STARTTLS (recommended)
gmail_use_tls = True                 # Enable TLS encryption (required by Gmail)

# --------------------------------------------------------------------------------
# MICROSOFT OUTLOOK/OFFICE 365 SMTP CONFIGURATION
# --------------------------------------------------------------------------------
# Microsoft Outlook.com and Office 365 SMTP settings
# REQUIREMENTS:
# - Modern authentication may be required for Office 365
# - App passwords may be needed for personal Outlook accounts
# - Check your organization's security policies for Office 365
# 
# RATE LIMITS (as of 2025):
# - 300 emails per day for Outlook.com
# - 10,000 emails per day for Office 365 (varies by plan)
# - 30 emails per minute rate limit
outlook_name = outlook               # Internal identifier for this SMTP config
outlook_host = smtp.office365.com   # Microsoft's SMTP server
outlook_port = 587                  # Port for STARTTLS
outlook_use_tls = True              # Enable TLS encryption (required)

# --------------------------------------------------------------------------------
# YAHOO MAIL SMTP CONFIGURATION
# --------------------------------------------------------------------------------
# Yahoo Mail SMTP settings
# REQUIREMENTS:
# - Enable "Less secure app access" or use App Password
# - Two-factor authentication recommended
# 
# RATE LIMITS (as of 2025):
# - 500 emails per day for free accounts
# - Higher limits for Yahoo Mail Plus/Pro
yahoo_name = yahoo                   # Internal identifier for this SMTP config
yahoo_host = smtp.mail.yahoo.com    # Yahoo's SMTP server
yahoo_port = 587                    # Port for STARTTLS
yahoo_use_tls = True                # Enable TLS encryption

# --------------------------------------------------------------------------------
# CUSTOM SMTP CONFIGURATION (Your Domain)
# --------------------------------------------------------------------------------
# Configuration for your own domain's SMTP server
# REQUIREMENTS:
# - Verify SMTP server supports your authentication method
# - Check firewall and DNS settings
# - Consider SPF, DKIM, and DMARC records for deliverability
# 
# NOTES:
# - Replace 'yourdomain.com' with your actual domain
# - Verify port and TLS settings with your hosting provider
# - Test authentication before production deployment
custom_name = custom                 # Internal identifier for this SMTP config
custom_host = mail.yourdomain.com    # Your domain's SMTP server
custom_port = 587                   # Port (587 for STARTTLS, 465 for SSL/TLS)
custom_use_tls = True               # Enable TLS encryption (recommended)

# --------------------------------------------------------------------------------
# HOSTING PROVIDER SMTP CONFIGURATION
# --------------------------------------------------------------------------------
# Configuration for hosting provider's SMTP service
# REQUIREMENTS:
# - Verify hosting provider's SMTP settings
# - Check if authentication is required
# - Confirm port and encryption requirements
# 
# NOTES:
# - This example uses port 465 with SSL/TLS (use_tls = False means direct SSL)
# - Some providers require specific authentication methods
# - Contact your hosting provider for exact configuration details
hosting_name = hosting               # Internal identifier for this SMTP config
hosting_host = smtp.hostingprovider.com  # Hosting provider's SMTP server
hosting_port = 465                  # Port for SSL/TLS (direct encryption)
hosting_use_tls = False             # False for direct SSL, True for STARTTLS

[SENDERS]
# ================================================================================
# EMAIL SENDER ACCOUNT CONFIGURATIONS
# ================================================================================
# Define individual email sender accounts with their authentication credentials
# and rate limiting parameters. Each sender can use different SMTP providers
# and have customized sending limits to prevent service abuse.
# 
# SECURITY BEST PRACTICES:
# - Use App Passwords instead of regular passwords where available
# - Enable 2FA on all email accounts
# - Store sensitive credentials in environment variables or secure vaults
# - Regularly rotate passwords and monitor for unauthorized access
# - Use dedicated sending accounts separate from personal/business accounts

# --------------------------------------------------------------------------------
# SENDER 1: Gmail Account Configuration
# --------------------------------------------------------------------------------
# Primary Gmail sender with conservative rate limits for reliable delivery
# 
# CONFIGURATION NOTES:
# - Use Gmail App Password, not regular password
# - Total limit per run prevents exceeding daily quotas
# - Per-minute and per-hour limits prevent rate limit violations
# - Gap between sends reduces chance of being flagged as spam
sender1_email = your.email@gmail.com        # Gmail address (replace with actual)
sender1_password = your_app_password        # Gmail App Password (16-character)
sender1_smtp = gmail                        # References gmail config from SMTP_CONFIGS
sender1_total_limit_per_run = 500          # Max emails per execution (Gmail daily limit)
sender1_limit_per_min = 10                 # Max emails per minute (burst control)
sender1_limit_per_hour = 100               # Max emails per hour (sustained rate)
sender1_per_run_gap = 5                    # Seconds between emails (reduces spam risk)
sender1_per_run_gap_randomizer = 0         # Random variation in gap time (0 = no randomization)

# --------------------------------------------------------------------------------
# SENDER 2: Outlook Account Configuration
# --------------------------------------------------------------------------------
# Microsoft Outlook/Office 365 sender with moderate rate limits
# 
# CONFIGURATION NOTES:
# - May require modern authentication for Office 365
# - Lower limits to accommodate Outlook's stricter policies
# - Longer gap between sends for better deliverability
sender2_email = your.email@outlook.com      # Outlook address (replace with actual)
sender2_password = your_password            # Outlook password or App Password
sender2_smtp = outlook                      # References outlook config from SMTP_CONFIGS
sender2_total_limit_per_run = 300          # Max emails per execution (conservative)
sender2_limit_per_min = 5                  # Max emails per minute (Outlook rate limit)
sender2_limit_per_hour = 50                # Max emails per hour (sustained rate)
sender2_per_run_gap = 8                    # Seconds between emails (spam prevention)
sender2_per_run_gap_randomizer = 2         # Random variation ±2 seconds (6-10 second range)

# --------------------------------------------------------------------------------
# SENDER 3: Yahoo Account Configuration
# --------------------------------------------------------------------------------
# Yahoo Mail sender with conservative rate limits
# 
# CONFIGURATION NOTES:
# - Yahoo has strict anti-spam policies
# - Very conservative limits to ensure deliverability
# - Longer gaps between sends recommended
sender3_email = your.email@yahoo.com        # Yahoo address (replace with actual)
sender3_password = your_password            # Yahoo password or App Password
sender3_smtp = yahoo                        # References yahoo config from SMTP_CONFIGS
sender3_total_limit_per_run = 200          # Max emails per execution (very conservative)
sender3_limit_per_min = 3                  # Max emails per minute (strict rate limit)
sender3_limit_per_hour = 30                # Max emails per hour (sustained rate)
sender3_per_run_gap = 10                   # Seconds between emails (longer delay)
sender3_per_run_gap_randomizer = 5         # Random variation ±5 seconds (5-15 second range)

# --------------------------------------------------------------------------------
# SENDER 4: Custom Domain Configuration
# --------------------------------------------------------------------------------
# Custom domain sender with flexible rate limits
# 
# CONFIGURATION NOTES:
# - Rate limits depend on your hosting provider's policies
# - No specific limits set (unlimited) - monitor usage carefully
# - Ensure proper SPF, DKIM, and DMARC records are configured
# - Monitor deliverability and adjust limits if needed
sender4_email = your.email@yourdomain.com   # Custom domain address (replace with actual)
sender4_password = your_password            # Custom domain password
sender4_smtp = custom                       # References custom config from SMTP_CONFIGS
# No rate limits specified = unlimited sending (use with caution)
# Uncomment and adjust the following if rate limits are needed:
# sender4_total_limit_per_run = 1000
# sender4_limit_per_min = 20
# sender4_limit_per_hour = 200
# sender4_per_run_gap = 3

# --------------------------------------------------------------------------------
# SENDER 5: Business/No-Reply Account Configuration
# --------------------------------------------------------------------------------
# Business or no-reply sender with conservative limits for transactional emails
# 
# CONFIGURATION NOTES:
# - Typically used for automated/transactional emails
# - Very conservative limits to maintain sender reputation
# - Longer gaps to ensure high deliverability
# - Consider using dedicated transactional email services for high volume
sender5_email = noreply@yourbusiness.com    # Business email address (replace with actual)
sender5_password = your_password            # Business email password
sender5_smtp = hosting                      # References hosting config from SMTP_CONFIGS
sender5_total_limit_per_run = 100          # Max emails per execution (conservative)
sender5_limit_per_min = 2                  # Max emails per minute (very conservative)
sender5_limit_per_hour = 20                # Max emails per hour (sustained rate)
sender5_per_run_gap = 15                   # Seconds between emails (longer delay)

# ================================================================================
# ADDITIONAL SENDER SLOTS
# ================================================================================
# Uncomment and configure additional senders as needed for increased capacity
# or redundancy. Each sender should have unique credentials and appropriate
# rate limits based on the provider's policies.

# sender6_email = backup1@domain.com
# sender6_password = backup_password
# sender6_smtp = gmail
# sender6_total_limit_per_run = 400
# sender6_limit_per_min = 8
# sender6_limit_per_hour = 80
# sender6_per_run_gap = 6

# sender7_email = backup2@domain.com
# sender7_password = backup_password
# sender7_smtp = outlook
# sender7_total_limit_per_run = 250
# sender7_limit_per_min = 4
# sender7_limit_per_hour = 40
# sender7_per_run_gap = 10
# sender7_per_run_gap_randomizer = 3

# ================================================================================
# PER-RUN GAP RANDOMIZATION SYSTEM
# ================================================================================
# The per_run_gap_randomizer feature adds intelligent randomization to email
# sending intervals to make email patterns appear more natural and human-like.
# This helps improve deliverability and reduces the risk of being flagged as
# automated bulk email by spam filters.
#
# HOW IT WORKS:
# - Base gap time: sender_per_run_gap (e.g., 30 seconds)
# - Randomizer value: sender_per_run_gap_randomizer (e.g., 5 seconds)
# - Actual gap range: base_gap ± randomizer (e.g., 25-35 seconds)
# - Each email gets a random gap within this range
#
# CONFIGURATION:
# sender1_per_run_gap = 30              # Base gap: 30 seconds
# sender1_per_run_gap_randomizer = 5    # Randomization: ±5 seconds
# Result: Each email will have a gap between 25-35 seconds
#
# EXAMPLES:
#
# 1. NO RANDOMIZATION (Traditional Fixed Timing):
#    per_run_gap = 30, per_run_gap_randomizer = 0
#    Result: 30s, 30s, 30s, 30s, 30s (predictable pattern)
#
# 2. LIGHT RANDOMIZATION (Subtle Variation):
#    per_run_gap = 30, per_run_gap_randomizer = 2
#    Result: 28s, 31s, 29s, 32s, 30s (slight natural variation)
#
# 3. MODERATE RANDOMIZATION (Natural Human-like Timing):
#    per_run_gap = 30, per_run_gap_randomizer = 5
#    Result: 27s, 34s, 28s, 33s, 31s (more natural variation)
#
# 4. HIGH RANDOMIZATION (Maximum Unpredictability):
#    per_run_gap = 30, per_run_gap_randomizer = 10
#    Result: 22s, 38s, 25s, 37s, 29s (highly varied timing)
#
# BENEFITS:
# - Mimics natural human email sending patterns
# - Reduces spam filter detection risk
# - Breaks up predictable automation signatures
# - Improves overall deliverability rates
# - Maintains average sending rate while adding variation
#
# PRODUCTION RECOMMENDATIONS:
#
# HIGH VOLUME CAMPAIGNS (Newsletter/Marketing):
# - Use moderate randomization (15-25% of base gap)
# - Example: gap=20, randomizer=4 (16-24 second range)
# - Balances throughput with natural variation
#
# COLD OUTREACH (Business Development):
# - Use higher randomization (25-35% of base gap)
# - Example: gap=45, randomizer=12 (33-57 second range)
# - Prioritizes deliverability over speed
#
# TRANSACTIONAL EMAILS (Order Confirmations, etc.):
# - Use light randomization (5-15% of base gap)
# - Example: gap=10, randomizer=1 (9-11 second range)
# - Maintains quick delivery with minimal variation
#
# CONSERVATIVE APPROACH (Maximum Safety):
# - Use high randomization with longer base gaps
# - Example: gap=60, randomizer=20 (40-80 second range)
# - Best for sender reputation protection
#
# TECHNICAL NOTES:
# - Randomization uses uniform distribution within the range
# - Minimum gap is always enforced (never goes below 1 second)
# - Queue calculations account for average randomized gap times
# - Each sender can have different randomization settings
# - Setting randomizer to 0 disables randomization (default behavior)
#
# MONITORING:
# - Monitor delivery rates when implementing randomization
# - Start with conservative values and gradually increase
# - Track spam complaints and bounce rates
# - Adjust randomization based on provider feedback

[RATE_LIMITER]
# ================================================================================
# GLOBAL RATE LIMITING CONFIGURATION
# ================================================================================
# Controls overall system-wide email sending limits to prevent abuse and
# ensure compliance with service provider policies.
# 
# PURPOSE:
# - Prevents accidentally exceeding provider limits across all senders
# - Provides circuit breaker functionality for system protection
# - Enables gradual scaling of email operations
# 
# PRODUCTION CONSIDERATIONS:
# - Set to 0 for unlimited (not recommended for production)
# - Consider daily/hourly limits of all configured email providers
# - Monitor usage patterns and adjust limits accordingly
# - Implement alerting when approaching limits

global_limit = 5000                 # Maximum total emails per execution across all senders
                                   # 0 = unlimited (use with extreme caution)
                                   # Recommended: Sum of all sender daily limits * 0.8

[RETRY_SETTINGS]
# ================================================================================
# EMAIL RETRY AND RESILIENCE CONFIGURATION
# ================================================================================
# Configures the system's behavior when email sending fails due to temporary
# issues like network problems, rate limits, or temporary service outages.
# 
# RETRY STRATEGY:
# - Exponential backoff with jitter (configured separately in code)
# - Per-sender retry limits prevent infinite loops
# - Cross-sender retry enables failover to backup accounts
# - Configurable delays prevent overwhelming failed services
# 
# PRODUCTION TUNING:
# - Higher retry counts for critical emails
# - Longer delays for rate-limited scenarios
# - Balance between delivery assurance and resource usage

max_retries_per_sender = 3          # Maximum retry attempts with the same sender
                                   # Prevents infinite loops with consistently failing senders
                                   # Recommended: 2-5 for most scenarios

retry_delay = 5                     # Base delay in seconds between retry attempts
                                   # Actual delay may use exponential backoff
                                   # Recommended: 5-30 seconds depending on failure type

max_retries_per_recipient = 5       # Maximum total retry attempts across all senders
                                   # Ensures eventual failure reporting for unreachable recipients
                                   # Recommended: 3-10 depending on criticality

[FAILURE_TRACKING]
# ================================================================================
# SENDER FAILURE TRACKING AND CIRCUIT BREAKER CONFIGURATION
# ================================================================================
# Implements circuit breaker pattern to automatically disable problematic
# senders and prevent cascading failures. This protects sender reputation
# and prevents wasting resources on consistently failing accounts.
# 
# CIRCUIT BREAKER STATES:
# - CLOSED: Normal operation, all senders available
# - OPEN: Sender blocked due to excessive failures
# - HALF-OPEN: Testing if blocked sender has recovered
# 
# FAILURE SCENARIOS:
# - Authentication failures (invalid credentials)
# - Rate limit exceeded (temporary block)
# - Network connectivity issues
# - SMTP server errors (5xx response codes)

max_failures_before_block = 5       # Consecutive failures before sender is blocked
                                   # Prevents rapid reputation damage
                                   # Recommended: 3-10 depending on tolerance

cooldown_period = 300               # Seconds to block sender after max failures
                                   # 300 seconds = 5 minutes
                                   # Recommended: 300-3600 (5 minutes to 1 hour)

failure_window = 3600               # Time window in seconds for failure tracking
                                   # 3600 seconds = 1 hour
                                   # Failures outside this window are not counted
                                   # Recommended: 1800-7200 (30 minutes to 2 hours)

reset_failures_after = 7200         # Reset failure count after this period
                                   # 7200 seconds = 2 hours
                                   # Gives senders a fresh start periodically
                                   # Recommended: 3600-86400 (1 hour to 1 day)

[FALLBACK_SETTINGS]
# ================================================================================
# SENDER FALLBACK AND REDUNDANCY CONFIGURATION
# ================================================================================
# Configures automatic failover to backup senders when primary senders fail.
# This ensures high availability and delivery reliability for critical emails.
# 
# FALLBACK STRATEGIES:
# - Round-robin through available senders
# - Skip blocked or rate-limited senders
# - Respect individual sender limits during fallback
# - Maintain delivery attempt logs for audit

enable_fallback = True              # Enable automatic fallback to backup senders
                                   # True = High availability mode
                                   # False = Fail fast mode (for testing/debugging)

max_fallback_attempts = 3           # Maximum number of different senders to try per email
                                   # Prevents excessive resource usage on undeliverable emails
                                   # Recommended: 2-5 depending on sender count

[APPLICATION]
# ================================================================================
# EMAIL DISTRIBUTION STRATEGY CONFIGURATION
# ================================================================================
# Determines how emails are distributed across multiple sender accounts.
# This affects load balancing, redundancy, and delivery patterns.
# 
# AVAILABLE STRATEGIES:
# 
# 1. rotate_email (Load Balancing Strategy):
#    - Distributes emails across senders in round-robin fashion
#    - Each recipient gets one email from the next available sender
#    - Optimal for high-volume sending with multiple accounts
#    - Provides load balancing and rate limit distribution
#    - Recommended for newsletter/marketing campaigns
# 
# 2. duplicate_send (Redundancy Strategy):
#    - Sends the same email to each recipient using multiple senders
#    - Each recipient receives duplicate emails from different accounts
#    - Ensures delivery through redundancy
#    - Higher resource usage but maximum delivery assurance
#    - Recommended for critical transactional emails
# 
# PRODUCTION CONSIDERATIONS:
# - rotate_email: Better for volume, respects provider limits
# - duplicate_send: Better for reliability, increases costs
# - Monitor delivery rates and adjust strategy accordingly

sender_strategy = rotate_email      # Email distribution strategy
                                   # Options: rotate_email, duplicate_send
                                   # rotate_email recommended for most use cases

[QUEUE_MANAGEMENT]
# ================================================================================
# SMART QUEUE MANAGEMENT CONFIGURATION (For rotate_email strategy)
# ================================================================================
# Controls how emails are distributed across sender queues for optimal performance.
# This system prevents long wait times and ensures fair distribution of emails
# across multiple senders with different gap times and rate limits.
#
# QUEUE STRATEGY:
# - Batch Processing: Load manageable chunks of emails instead of all at once
# - Smart Distribution: Calculate real wait times including gaps and queue length
# - Overflow Handling: Manage situations when all queues are full
# - Dynamic Refilling: Automatically load more emails as queues empty
#
# PERFORMANCE BENEFITS:
# - Prevents emails from waiting hours in long queues
# - Achieves true concurrent sending across all senders
# - Optimizes throughput while respecting individual sender limits
# - Provides predictable processing times for better user experience

max_queue_size_per_sender = 30      # Maximum emails per sender queue at any time
                                   # Prevents individual emails from waiting too long
                                   # Formula: max_wait = queue_size × sender_gap_time
                                   # Example: 30 emails × 2s gap = 60s max wait
                                   # Recommended: 20-50 depending on gap times

# batch_processing_size is auto-calculated as: max_queue_size_per_sender × number_of_senders
                                   # This ensures optimal batch size based on actual sender count
                                   # Manual override available if needed: batch_processing_size = 120

refill_threshold = 10               # Refill queues when total emails drop below this per sender
                                   # Ensures continuous processing without interruption
                                   # Lower values = more frequent database queries
                                   # Higher values = potential processing gaps
                                   # Recommended: 5-15 emails per sender

queue_calculation_method = smart    # Method for calculating optimal sender selection
                                   # Options: smart, simple, round_robin
                                   # smart: Calculate real wait time (gap + queue processing)
                                   # simple: Use only queue length
                                   # round_robin: Distribute evenly regardless of timing

overflow_strategy = wait_shortest   # Strategy when all queues are at max capacity
                                   # Options: wait_shortest, drop_oldest, expand_queue
                                   # wait_shortest: Wait for sender with shortest processing time
                                   # drop_oldest: Remove oldest queued email (not recommended)
                                   # expand_queue: Temporarily exceed max_queue_size

enable_queue_balancing = True       # Enable automatic queue rebalancing
                                   # Redistributes emails between queues for optimal performance
                                   # Useful when sender availability changes during processing
                                   # Recommended: True for production

queue_balance_interval = 30         # Seconds between queue rebalancing checks
                                   # Lower values = more responsive but higher CPU usage
                                   # Higher values = less responsive but more efficient
                                   # Recommended: 15-60 seconds

max_wait_time_threshold = 300       # Maximum acceptable wait time for any email (seconds)
                                   # Emails exceeding this threshold trigger queue rebalancing
                                   # Prevents emails from getting stuck in slow queues
                                   # Recommended: 180-600 seconds (3-10 minutes)

# ================================================================================
# QUEUE PERFORMANCE TUNING EXAMPLES
# ================================================================================
#
# HIGH VOLUME SCENARIO (10,000+ emails):
# max_queue_size_per_sender = 50
# batch_processing_size = 150
# refill_threshold = 15
# queue_balance_interval = 60
#
# LOW LATENCY SCENARIO (immediate processing priority):
# max_queue_size_per_sender = 20
# batch_processing_size = 60
# refill_threshold = 5
# queue_balance_interval = 15
#
# RESOURCE CONSTRAINED SCENARIO (limited memory/CPU):
# max_queue_size_per_sender = 15
# batch_processing_size = 45
# refill_threshold = 5
# queue_balance_interval = 120
#
# MIXED GAP TIMES SCENARIO (senders with very different gap times):
# max_queue_size_per_sender = 25
# queue_calculation_method = smart
# enable_queue_balancing = True
# max_wait_time_threshold = 180

[LOGGING]
# ================================================================================
# COMPREHENSIVE LOGGING CONFIGURATION
# ================================================================================
# Configures detailed logging for monitoring, debugging, and compliance.
# Proper logging is essential for production systems to track performance,
# diagnose issues, and maintain audit trails.
# 
# LOG LEVELS (in order of verbosity):
# - DEBUG: Detailed diagnostic information
# - INFO: General information about system operation
# - WARNING: Potentially harmful situations
# - ERROR: Error events that allow system to continue
# - CRITICAL: Serious error events that may cause system failure
# 
# PRODUCTION LOGGING BEST PRACTICES:
# - Use INFO level for console output to reduce noise
# - Log all levels to files for comprehensive debugging
# - Rotate logs regularly to prevent disk space issues
# - Monitor log files for error patterns and system health
# - Consider centralized logging for distributed systems

console_level = INFO                # Log level for console output
                                   # INFO recommended for production (reduces noise)
                                   # DEBUG useful for troubleshooting

file_levels = DEBUG,INFO,WARNING,ERROR,CRITICAL  # Log levels written to files
                                   # All levels recommended for comprehensive audit trail
                                   # Separate files created for each level

max_log_files_to_keep = 10          # Maximum number of log files to retain
                                   # Prevents unlimited disk space usage
                                   # Recommended: 7-30 depending on volume and retention needs

log_dir = logs                      # Directory for log files (relative to config)
                                   # Ensure directory exists and is writable
                                   # Consider using absolute paths for production

[RECIPIENTS]
# ================================================================================
# RECIPIENT DATA CONFIGURATION
# ================================================================================
# Specifies the source of recipient email addresses and related data.
# Supports both CSV files and SQLite database sources.
# 
# RECIPIENTS_FROM OPTIONS:
# - csv: Load recipients from CSV file
# - db: Load recipients from SQLite database
# 
# RECIPIENTS_PATH:
# - For CSV: Path to CSV file (e.g., "recipients.csv")
# - For DB: Path to SQLite database file (e.g., "companies.db")
# 
# CSV SOURCE CONFIGURATION:
# - First column must contain email addresses
# - Additional columns: name, company, custom fields (optional)
# - Header row supported for field mapping
# - UTF-8 encoding recommended for international characters
# 
# DATABASE SOURCE CONFIGURATION:
# - db_table: Name of table containing recipient data
# - db_email_column: Name of column containing email addresses
# - db_id_column: Name of primary key column (used for tracking)
# - System will automatically add 'email_sent' column to track status
# - Status values: 'sent', 'error', NULL (not sent)
# 
# PRODUCTION CONSIDERATIONS:
# - Validate email addresses before processing
# - Implement unsubscribe handling
# - Respect privacy regulations (GDPR, CAN-SPAM, etc.)
# - Regular data cleanup and validation
# - Database source provides better tracking and status management

recipients_from = csv                   # Source type: csv or db
recipients_path = recipients.csv        # Path to CSV file or SQLite database
                                       # Relative to config file location
                                       # Extension determines file type (.csv or .db)

# For database source only
db_table = companies                    # Name of table containing recipients
                                       # Table must exist with email column
db_email_column = email                 # Name of column containing email addresses
                                       # Additional columns will be preserved
db_id_column = id                       # Name of primary key column
                                       # Used for tracking email status updates

# ================================================================================
# ADVANCED DATABASE COLUMN FILTERING (Database source only)
# ================================================================================
# Filter recipients based on additional database column values.
# This allows precise targeting of email recipients based on data quality,
# reachability status, or business criteria stored in your database.
# 
# FILTER SYNTAX:
# filter_columns = column1:value1,value2;column2:NOT:value3,value4
# 
# COMPONENTS:
# - column_name: Name of database column to filter by
# - values: Comma-separated list of values to include/exclude
# - NOT: prefix: Exclude specified values instead of including them
# - Semicolon (;): Separates multiple column filters (AND logic)
# 
# FILTERING LOGIC:
# - Multiple values in same column: OR logic (include if matches any)
# - Multiple columns: AND logic (must satisfy all column filters)
# - NOT filters: Exclude records matching any of the specified values
# 
# COMMON USE CASES:
# 
# 1. EMAIL DELIVERABILITY FILTERING:
#    Only send to emails that are likely to be delivered
#    filter_columns = is_deliverable:1,true;is_disabled:NOT:1,true
# 
# 2. BUSINESS REACHABILITY FILTERING:
#    Target only companies that are reachable and not high-risk
#    filter_columns = is_reachable:reachable,tryable;risk_level:NOT:high,blocked
# 
# 3. EMAIL VALIDATION FILTERING:
#    Send only to validated, non-disposable email addresses
#    filter_columns = is_valid_syntax:1;is_disposable:NOT:1;is_role_account:NOT:1
# 
# 4. SMTP CONNECTIVITY FILTERING:
#    Target emails where SMTP connection was successful
#    filter_columns = can_connect_smtp:1,true;mx_accepts_mail:1,true
# 
# 5. MULTI-CRITERIA BUSINESS FILTERING:
#    Complex filtering for high-quality leads
#    filter_columns = is_deliverable:1;is_reachable:reachable;company_size:NOT:micro
# 
# PRODUCTION EXAMPLES:
# 
# Example 1: Conservative email validation approach
# filter_columns = is_valid_syntax:1;is_disposable:NOT:1;is_deliverable:1;is_disabled:NOT:1
# 
# Example 2: Business reachability focus
# filter_columns = is_reachable:reachable,tryable;can_connect_smtp:1
# 
# Example 3: Exclude risky and blocked contacts
# filter_columns = status:NOT:risky,blocked,bounced;is_catch_all:NOT:1
# 
# IMPORTANT NOTES:
# - Column names must exist in your database table
# - Values are case-sensitive and must match database values exactly
# - Empty or NULL values in database columns are excluded by default
# - Test filters on a small dataset before full deployment
# - Monitor filter effectiveness and adjust based on delivery results

filter_columns =                        # Database column filtering rules
                                       # Leave empty to disable filtering
                                       # Example: is_deliverable:1;is_reachable:reachable,tryable

# ================================================================================
# FILTER EXAMPLES FOR DIFFERENT SCENARIOS
# ================================================================================
# 
# SCENARIO 1: Email Marketing Campaign (High Volume, Good Deliverability)
# filter_columns = is_deliverable:1;is_valid_syntax:1;is_disposable:NOT:1;is_disabled:NOT:1
# 
# SCENARIO 2: Cold Outreach (Business Focus, Quality over Quantity)
# filter_columns = is_reachable:reachable,tryable;is_role_account:NOT:1;company_size:NOT:micro
# 
# SCENARIO 3: Transactional Emails (Maximum Deliverability)
# filter_columns = is_deliverable:1;can_connect_smtp:1;mx_accepts_mail:1;has_full_inbox:NOT:1
# 
# SCENARIO 4: Re-engagement Campaign (Previously Engaged Contacts)
# filter_columns = email_sent:sent;last_opened:NOT:NULL;unsubscribed:NOT:1
# 
# SCENARIO 5: Risk-Averse Approach (Avoid Bounces and Spam Complaints)
# filter_columns = is_deliverable:1;is_catch_all:NOT:1;spam_risk:NOT:high;bounce_risk:NOT:high

[EMAIL_CONTENT]
# ================================================================================
# EMAIL CONTENT AND TEMPLATE CONFIGURATION
# ================================================================================
# Defines the content, templates, and attachments for outgoing emails.
# Supports both plain text and HTML formats with template variables.
# 
# TEMPLATE FEATURES:
# - Variable substitution (e.g., {{name}}, {{company}})
# - Conditional content blocks
# - HTML and plain text alternatives
# - Inline images and attachments
# 
# PRODUCTION CONSIDERATIONS:
# - Test templates thoroughly before deployment
# - Validate HTML for cross-client compatibility
# - Optimize images for email clients
# - Include plain text alternatives for accessibility
# - Monitor spam scores and adjust content accordingly

subject = Your Professional Email Subject  # Email subject line
                                   # Supports template variables (e.g., {{name}})
                                   # Keep under 50 characters for mobile compatibility
                                   # Avoid spam trigger words

body_html_file = email_template.html # Path to HTML email template
                                   # Relative to config file location
                                   # Ensure file exists and contains valid HTML

attachment_dir = attachments        # Directory containing email attachments
                                   # Relative to config file location
                                   # All files in directory will be attached
                                   # Consider file size limits (typically 25MB total)

# ================================================================================
# ADDITIONAL PRODUCTION CONFIGURATIONS
# ================================================================================
# EMAIL PERSONALIZATION SYSTEM
# ================================================================================
# Advanced email personalization using Jinja2 template engine for dynamic content
# generation. Supports multiple data sources and graceful fallback handling.

[EMAIL_PERSONALIZATION]
# --------------------------------------------------------------------------------
# PERSONALIZATION CONTROL
# --------------------------------------------------------------------------------
# Enable or disable the advanced personalization system
# When disabled, falls back to basic name extraction from email addresses
enable_personalization = false

# --------------------------------------------------------------------------------
# PERSONALIZATION DATA SOURCES
# --------------------------------------------------------------------------------
# Configure how placeholders in email templates are populated with data.
# Each placeholder can use different data sources:
#
# DATA SOURCE TYPES:
# 1. email_extraction    - Extract name from recipient's email address
# 2. static:value        - Use a fixed static value
# 3. database_column:col - Get value from database column (with graceful fallback)
# 4. dynamic:type        - Generate dynamic values (dates, etc.)
#
# AVAILABLE DYNAMIC TYPES:
# - current_date    : Full date (e.g., "July 11, 2025")
# - current_year    : Current year (e.g., "2025")
# - current_month   : Current month name (e.g., "July")
# - current_day     : Current day number (e.g., "11")

# Basic recipient information
recipient_name = email_extraction

# Sender information (customize these with your details)
sender_name = static:Your Name Here
sender_title = static:Your Professional Title
sender_company = static:Your Company Name

# Database-driven personalization (requires corresponding database columns)
# These will show warnings if columns don't exist, but won't break the system
company_name = database_column:company_name
industry = database_column:industry
website = database_column:website
location = database_column:location
job_title = database_column:job_title

# Dynamic date/time values
current_date = dynamic:current_date
current_year = dynamic:current_year
current_month = dynamic:current_month

# --------------------------------------------------------------------------------
# TEMPLATE USAGE EXAMPLES
# --------------------------------------------------------------------------------
# In your HTML templates, use these placeholders:
#
# JINJA2 SYNTAX (when personalization is enabled):
# Hello {{recipient_name}}!
# I'm {{sender_name}}, a {{sender_title}} at {{sender_company}}.
# {% if company_name %}I noticed you work at {{company_name}}.{% endif %}
# Today is {{current_date}}.
#
# LEGACY SYNTAX (always supported):
# Hi <strong>Name</strong>,  (automatically replaced with recipient name)
#
# CONDITIONAL CONTENT:
# {% if company_name %}
#   Content shown only when company_name is available
# {% endif %}
#
# LOOPS (for advanced use cases):
# {% for skill in skills %}
#   <li>{{skill}}</li>
# {% endfor %}

# ================================================================================
# DYNAMIC EMAIL ATTACHMENTS SYSTEM
# ================================================================================
# Configure email attachments that are embedded directly in HTML templates
# using Content-ID (CID) references. This allows images and files to be
# displayed inline within the email content.

[EMAIL_ATTACHMENTS]
# --------------------------------------------------------------------------------
# ATTACHMENT CONFIGURATION
# --------------------------------------------------------------------------------
# Define attachments that will be embedded in emails with CID references
# Format: attachment_name = file_path:content_id
#
# USAGE IN HTML TEMPLATES:
# <img src="cid:content_id" alt="Description" />
# <a href="cid:content_id">Download File</a>
#
# SUPPORTED FILE TYPES:
# - Images: .jpg, .jpeg, .png, .gif, .bmp, .webp
# - Documents: .pdf, .doc, .docx, .txt
# - Archives: .zip, .rar
# - Any file type can be attached

# Example: Resume as image attachment
# This creates a CID reference "resume_image" that can be used in templates
# resume_attachment = attachments/resume.jpg:resume_image
# Example in html file: <img src="cid:resume_image"/>


# Example: Multiple attachments
# portfolio_image = attachments/portfolio.png:portfolio_img
# resume_pdf = attachments/resume.pdf:resume_document
# cover_letter = attachments/cover_letter.pdf:cover_letter_doc

# Example: Company logo for email branding
# company_logo = attachments/logo.png:company_logo

# --------------------------------------------------------------------------------
# TEMPLATE INTEGRATION EXAMPLES
# --------------------------------------------------------------------------------
# In your HTML email templates, reference attachments using their CID:
#
# INLINE IMAGES:
# <img src="cid:resume_image" alt="My Resume" style="max-width: 100%;" />
# <img src="cid:company_logo" alt="Company Logo" width="150" />
#
# DOWNLOADABLE LINKS:
# <a href="cid:resume_document">📄 Download Resume (PDF)</a>
# <a href="cid:portfolio_img">🖼️ View Portfolio</a>
#
# STYLED ATTACHMENTS:
# <div class="attachment-container">
#   <img src="cid:resume_image" class="resume-image" />
#   <a href="cid:resume_document" class="download-link">Download PDF</a>
# </div>

# --------------------------------------------------------------------------------
# FILE PATH CONFIGURATION
# --------------------------------------------------------------------------------
# File paths can be:
# 1. Relative to the mail directory: attachments/file.jpg
# 2. Absolute paths: /full/path/to/file.jpg
# 3. Paths with environment variables: ${HOME}/documents/file.pdf
#
# BEST PRACTICES:
# - Keep attachment files in the 'attachments' directory
# - Use descriptive CID names (resume_image, not img1)
# - Optimize image sizes for email (< 1MB recommended)
# - Test attachments across different email clients
# - Provide fallback text for images that might not load

# ================================================================================
# The following sections can be added for advanced production scenarios:
# 
# [MONITORING]
# - Health check endpoints
# - Performance metrics collection
# - Alert thresholds and notifications
# 
# [SECURITY]
# - IP whitelist/blacklist
# - Rate limiting by IP/user
# - Authentication requirements
# 
# [PERFORMANCE]
# - Connection pooling settings
# - Timeout configurations
# - Memory usage limits
# 
# [COMPLIANCE]
# - Data retention policies
# - Audit log requirements
# - Privacy regulation compliance
# ================================================================================
